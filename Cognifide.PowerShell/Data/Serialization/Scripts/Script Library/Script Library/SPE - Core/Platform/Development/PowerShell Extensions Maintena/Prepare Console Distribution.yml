---
ID: "ac05422c-a1b1-41ba-a1fd-4ec7e944de3b"
Parent: "01bb164c-5e8e-4c9b-941f-e5340bdd520c"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/SPE - Core/Platform/Development/PowerShell Extensions Maintenance/Prepare Console Distribution"
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    # Clear test items:
    # Get-ChildItem 'master:\system\Modules\PowerShell\Script Library' -recurse | Where-Object {  ($_.Name -match '\(test\)') } | Remove-Item
    
    # Setup Chrome
    Get-Item -Path "master:{FE669C6E-5CE5-4A7D-B4D3-5039B4C6AE75}" | Invoke-Script
    Get-Item -Path "master:{41605861-08CB-4365-BB6B-5CB20ED97C98}" | Invoke-Script
    
    if([CurrentSitecoreVersion]::IsAtLeast([SitecoreVersion]::V80)){
      $sitecore7Warning = "" 
    } else {
      $sitecore7Warning = @"
    ******************************************************
    If you are on Sitecore 7.0 - after installing 
    the package please run the script located under 
    the following path in your Script Library:
    
    'Platform/Development/PowerShell Extensions Maintenance/Restore Rules on Sitecore 7dot0'
    ******************************************************
    "@;
    }
    
    $Version = "$((Get-Host).Version.Major).$((Get-Host).Version.Minor)"
    
    # Build Standard Package
    
    $package = new-package "Sitecore PowerShell Extensions";
    $package.Sources.Clear();
    
    $package.Metadata.Author = "Adam Najmanowicz, Michael West";
    $package.Metadata.Publisher = "Sitecore PowerShell Extensions Team";
    $package.Metadata.Version = $Version;
    $package.Metadata.Readme = '
    This module provides 2 immediately usable interfaces 
    The "PowerShell Console" available from the "Sitecore"
    menu and the "PowerShell ISE" available from the 
    "Developer Tools" sub-menu as well as Reports 
    in the Sitecore -> Reporting Tools menu.
    
    --------------------------------------------------------
    BEFORE UPGRADING THE MODULE from previous version, 
    please back-up your script library!
    
    After you upgrade make sure to clean your browser cache!
    --------------------------------------------------------
    
    ' + 
    $sitecore7Warning + 
    '
    
    PowerShell ISE comes with tutorial scripts and
    Script Library for you to experiment with. Enjoy!
    
    You can find a fairly detailed release notes here:
    http://bit.ly/speReleaseNotes
    
    Please report any problems in our issue tracker:
    http://bit.ly/ScPsIss
    
    Thank you for using Sitecore PowerShell Extensions.
    
    Copyright (c) 2010-2017 Adam Najmanowicz
    Copyright (c) 2013-2017 Michael West
    
    https://sitecorepowershell.com/
    http://blog.najmanowicz.com/
    http://michaellwest.blogspot.com/'
    
    # Item templates
    $source = Get-Item 'master:\templates\Modules' | New-ItemSource -Name 'Master Item Templates Module Node' -InstallMode Merge -MergeMode Merge
    $source = Get-Item 'master:\templates\Modules\PowerShell Console' | New-ItemSource -Name 'Master Item Templates' -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules engine taxonomy templates for Sitecore 7.0 that misses it
    if([SitecoreVersion]::Current -lt [SitecoreVersion]::V80){
      $source = Get-Item 'master:\templates\System\Rules\Taxonomy' | New-ItemSource -Name 'Rules Engine Taxonomy' -InstallMode Skip -SkipVersions
      $package.Sources.Add($source);
      Write-Host "Adding rules engine taxonomy templates" -ForegroundColor Green
    }
    
    # Module Root
    $source = Get-Item 'master:\system\Modules\PowerShell' | New-ExplicitItemSource -Name "Master Module Root" -InstallMode Merge -MergeMode Merge
    $package.Sources.Add($source);
    
    # Colors
    $source = Get-Item 'master:\system\Modules\PowerShell\Console Colors' | New-ItemSource -Name "Master Colors" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Fonts
    $source = Get-Item 'master:\system\Modules\PowerShell\Fonts' | New-ItemSource -Name "Master Fonts" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Tag Definition
    $source = Get-Item "master:/system/Settings/Rules/Definitions/Tags/PowerShell" | New-ItemSource -Name "Rules - Tag Definition" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Ise Plugins Tag Definition
    $source = Get-Item "master:/system/Settings/Rules/Definitions/Tags/PowerShell ISE" | New-ItemSource -Name "ISE Plugin Rules - Tag Definition" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Ise Experience Buttons Tag Definition
    $source = Get-Item "master:\system\Settings\Rules\Definitions\Tags\PowerShell Experience Buttons" | New-ItemSource -Name "ISE Experience Buttons Rules - Tag Definition" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Rules
    $source = Get-Item "master:/system/Settings/Rules/Definitions/Elements/PowerShell" | New-ItemSource -Name "Rules" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Ise Plugin Rules
    $source = Get-Item "master:/system/Settings/Rules/Definitions/Elements/PowerShell ISE" | New-ItemSource -Name "Ise Plugin Rules" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Ise Experience Buttons Rules
    $source = Get-Item "master:\system\Settings\Rules\Definitions\Elements\PowerShell Experience Buttons" | New-ItemSource -Name "Ise Experience Buttons Rules" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Rules Engine - Source Definition
    $source = Get-Item "master:/system/Settings/Rules/PowerShell" | New-ItemSource -Name "Rules Source" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Script Library
    $source = Get-Item 'master:\system\Modules\PowerShell\Script Library' | New-ExplicitItemSource -Name "Master Script Library" -InstallMode Merge -MergeMode Clear
    $package.Sources.Add($source);
    $source = Get-ChildItem 'master:\system\Modules\PowerShell\Script Library' | 
        ? { -not ($_.Name -eq "Authorable Reports") } | # Skip Authorable Reports
        ? { -not ($_.Name.StartsWith("__")) } | # Skip test libraries
        %{ Get-ChildItem "$($_.ProviderPath)" -WithParent -Recurse} | 
        New-ExplicitItemSource -Name "Master Script Library Content" -InstallMode  Overwrite
    $package.Sources.Add($source);
    
    # Settings
    $source = @(Get-Item -Path "master:\system\Modules\PowerShell\Settings") + (Get-ChildItem -Path "master:\system\Modules\PowerShell\Settings") + (Get-ChildItem "All Users" -Path "master:\system\Modules\PowerShell\Settings" -Recurse) | New-ExplicitItemSource -Name "Settings" -InstallMode Merge -MergeMode Clear
    $package.Sources.Add($source);
    
    # Applications
    $source = Get-Item "core:\content\Applications\PowerShell" | New-ItemSource -Name "Applications" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # PowerShell Dictionary - translation strings
    $source = Get-Item "core:\system\Dictionary\PowerShell" | New-ItemSource -Name "Applications" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Application Layouts
    $source = Get-ChildItem 'core:\layout\Layouts\Applications\PowerShell' -WithParent | New-ExplicitItemSource "Application Layouts" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Start Menu
    $source = Get-ChildItem '*PowerShell*' -path 'core:/content/Documents and settings/All users/Start menu/' -Recurse | New-ExplicitItemSource "Start Menu Icons" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Content Editor Context Menu integration
    $source = Get-ChildItem '*PowerShell*' -path 'core:/content/Applications/Content Editor/Context Menues/Default/' -Recurse | New-ExplicitItemSource "Content Editor Context Menu integration #1" -InstallMode Merge -MergeMode Clear
    $package.Sources.Add($source);
    $source = Get-Item 'core:/content/Applications/Content Editor/Context Menues/Default/Edit Script/' | New-ExplicitItemSource "Content Editor Context Menu integration #2" -InstallMode Merge -MergeMode Clear
    $package.Sources.Add($source);
    
    # LaunchPad
    if([CurrentSitecoreVersion]::IsAtLeast([SitecoreVersion]::V80)){
    $source = Get-Item 'core:/sitecore/client/Applications/Launchpad/PageSettings/Buttons/ContentEditing/PowerShell ISE' | New-ItemSource -Name "LaunchPad integration" -InstallMode Overwrite
    $package.Sources.Add($source);
    }
    
    # Task Integration
    $source = Get-Item master:\system\Tasks\Commands\PowerShellScriptCommand | New-ItemSource -Name "Task Integration - Command" -InstallMode Overwrite
    $package.Sources.Add($source);
    
    # Files
    $source = Get-Item "$AppPath\App_Config\Include\Cognifide.PowerShell*.*" | ? {-not $_.Name.Contains("Serialization") } | New-ExplicitFileSource -Name "Configuration Files"
    $package.Sources.Add($source);
    $source = Get-Item "$AppPath\bin\Cognifide.PowerShell*.dll" | New-ExplicitFileSource -Name "PowerShell Binaries"
    $package.Sources.Add($source);
    $source = Get-Item "$AppPath/sitecore/shell/Themes/Standard/PowerShell.zip" | New-ExplicitFileSource -Name "Icons"
    $package.Sources.Add($source);
    $source = Get-ChildItem -exclude *.cs -Path "$AppPath\sitecore modules\PowerShell\" -filter "*.*" -Recurse -File | New-ExplicitFileSource -Name "Console Assets"
    $package.Sources.Add($source);
    $source = Get-ChildItem -exclude *.cs -Path "$AppPath\sitecore modules\Shell\PowerShell\" -filter "*.*" -Recurse -File | New-ExplicitFileSource -Name "Console Controls"
    $package.Sources.Add($source);
    
    #Security Roles
    $source = Get-Role -Identity "PowerShell Extensions Remoting" | New-SecuritySource -Name "Remoting Role" 
    $package.Sources.Add($source);
    
    
    $packageName = "$($package.Name)-$Version for Sitecore $($SitecoreVersion.Major)";
    Export-Package -Project $package -Path "$packageName.xml"
    Export-Package -Project $package -Path "$packageName.zip" -Zip
    Download-File "$SitecorePackageFolder\$packageName.zip"
    
    Import-Function -Name Compress-Archive
    
    # Build Minimal Package
    
    $minimalPackageName = "$($SitecorePackageFolder)\SPE Minimal-$($Version) for Sitecore $($SitecoreVersion.Major).zip"
    
    Compress-Archive -Path "$($AppPath)App_Config" -DestinationPath $minimalPackageName -Include "Cognifide.PowerShell.config", "Cognifide.PowerShell.Minimal.config.disabled" | Out-Null
    Compress-Archive -Path "$($AppPath)bin" -DestinationPath $minimalPackageName -Include "Cognifide.PowerShell.dll", "Cognifide.PowerShell.VersionSpecific.dll" -Update | Out-Null
    Compress-Archive -Path "$($AppPath)sitecore modules" -DestinationPath $minimalPackageName -Include "web.config", "RemoteAutomation.asmx", "RemoteScriptCall.ashx" -Update | Out-Null
    
    # Build Remoting Package
    
    $remotingSourcePath = (Get-Item -Path $AppPath).Parent.FullName
    if(Test-Path -Path $remotingSourcePath) {
        $remotingPackageName = "$($SitecorePackageFolder)\SPE Remoting-$($Version).zip"
        
        Compress-Archive -Path "$($remotingSourcePath)\Modules\SPE\" -DestinationPath $remotingPackageName | Out-Null
    }
    
    $Version = "$((Get-Host).Version.Major).$((Get-Host).Version.Minor)"
    
    # Build Standard Package
    
    $package = new-package "Sitecore PowerShell Extensions - Authorable Reports";
    $package.Sources.Clear();
    
    $package.Metadata.Author = "Adam Najmanowicz, Michael West";
    $package.Metadata.Publisher = "Sitecore PowerShell Extensions Team";
    $package.Metadata.Version = $Version;
    $package.Metadata.Readme = '
    This module provides 2 reports based on 
    Sitecore PowerShell Extensions module available from the 
    SPE Toolbox in the "Start" menu on Desktop.
    The reports are:
    - Index Viewer
    - Rule Based Report
    
    Thank you for using Sitecore PowerShell Extensions.
    
    Copyright (c) 2010-2016 Adam Najmanowicz
    Copyright (c) 2013-2016 Michael West
    
    https://sitecorepowershell.com/
    http://blog.najmanowicz.com/
    http://michaellwest.blogspot.com/'
    
    # Item templates
    $source = Get-Item 'master:\templates\Modules\PowerShell Authorable Reports' | New-ItemSource -Name 'Master Item Templates' -InstallMode Overwrite
    $package.Sources.Add($source);
    
    $source = Get-Item 'master:\system\Modules\PowerShell\Script Library\Authorable Reports' | New-ItemSource -Name 'Master Item Templates' -InstallMode Overwrite
    $package.Sources.Add($source);
    
    $packageName = "$($package.Name)-$Version";
    Export-Package -Project $package -Path "$packageName.zip" -Zip
    
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20130510T150325
